from lib.osmBase import OsmBase
from lib.osmCommon import (
                             mongoCollection,
                             mongoOrgCollection)

from bson.objectid import ObjectId

import pprint


class GeneralTools(OsmBase):
     """docstring for GeneralTools"""
     def __init__(self):
          super(GeneralTools, self).__init__("general_tools", 'general_tools.log')
        
     def remove_db_keys(self):
          '''
          osm文件 全部 tag key, 注释掉的字段，即为 需要保留处理的字段
          '''
          remove_list = [
                    'tags.abandoned',
                    'tags.abandoned:place',
                    'tags.abutters',
                    'tags.access',
                    # 'tags.addr:city',
                    # 'tags.addr:city_1',
                    # 'tags.addr:city:en',
                    # 'tags.addr:country',
                    # 'tags.addr:district',
                    # 'tags.addr:door',
                    # 'tags.address',
                    'tags.addr:flats',
                    # 'tags.addr:floor',
                    # 'tags.addr:full',
                    # 'tags.addr:housename',
                    # 'tags.addr:housenumber',
                    # 'tags.addr:housenumber:en',
                    # 'tags.addr:interpolation',
                    # 'tags.addr:neighbourhood',
                    'tags.addr:place',
                    # 'tags.addr:postcode',
                    # 'tags.addr:province',
                    'tags.addr:room',
                    'tags.addr:state',
                    # 'tags.addr:street',
                    # 'tags.addr:street:alley',
                    # 'tags.addr:street:en',
                    # 'tags.addr:subdistrict',
                    'tags.addr:unit',
                    'tags.admin_level',
                    'tags.advertising',
                    # 'tags.aerialway',
                    # 'tags.aerialway:access',
                    'tags.aerialway:heating',
                    'tags.aerialway:occupancy',
                    'tags.aerialway:summer:access',
                    'tags.aerodrome',
                    'tags.aerodrome:type',
                    'tags.aeroway',
                    'tags.alt_name',
                    'tags.alt_name_1',
                    'tags.alt_name_2',
                    'tags.alt_name:cs',
                    'tags.alt_name:de',
                    'tags.alt_name:en',
                    'tags.alt_name:eo',
                    'tags.alt_name:ru',
                    'tags.alt_name:vi',
                    'tags.alt_name:zh',
                    'tags.alt_name:zh-CN',
                    'tags.alt_name:zh-hant',
                    'tags.alt_name:zh-Hant-CN',
                    'tags.alt_name:zh_pinyin',
                    # 'tags.amenity',
                    # 'tags.animal',
                    # 'tags.animals',
                    'tags.architect',
                    # 'tags.area',
                    # 'tags.area:highway',
                    'tags.artist_name',
                    'tags.artist_name:en',
                    'tags.artist_name:zh_pinyin',
                    'tags.artist:wikidata',
                    'tags.artwork',
                    'tags.artwork_type',
                    # 'tags.atm',
                    # 'tags.attraction',
                    'tags.authentication',
                    'tags.authentication:membership_card',
                    # 'tags.backrest',
                    'tags.barrier',
                    # 'tags.bench',
                    # 'tags.bicycle',
                    # 'tags.bicycle_parking',
                    
                    # bicycle:right=obligatory, can not be 'no'
                    'tags.bicycle:right',
                    # 'tags.bicycle_road',
                    # 'tags.billiards:pool',
                    # 'tags.bin',
                    # 'tags.board_type',
                    # 'tags.boat',
                    # 'tags.bollard',

                    # no booking keywords
                    'tags.booking',
                    # 'tags.border_type',
                    # 'tags.boundary',
                    # 'tags.branch',
                    # 'tags.brand',
                    'tags.breakfast',
                    # 'tags.bridge',
                    # 'tags.bridge:structure',
                    'tags.building',
                    'tags.building_1',
                    'tags.building:colour',
                    'tags.building:height',
                    'tags.building:level',
                    'tags.building:levels',
                    'tags.building:levels:underground',
                    'tags.building:material',
                    'tags.building:min_level',
                    'tags.building:part',
                    'tags.building:parts',
                    'tags.building:type',
                    'tags.building:use',
                    'tags.built',
                    # 'tags.bus',
                    'tags.buses',
                    'tags.busway:left',
                    'tags.busway:right',
                    'tags.cables',
                    'tags.canoe',
                    'tags.capacity',
                    'tags.capital',
                    'tags.car',
                    'tags.cargo',
                    'tags.check_date',
                    'tags.china_class',
                    'tags.cinema:3D',
                    'tags.circuits',
                    'tags.climbing:boulder',
                    'tags.climbing:routes',
                    'tags.closest_town',
                    'tags.clothes',
                    'tags.club',
                    'tags.code',
                    'tags.collection_times',
                    'tags.color',
                    'tags.colour',
                    'tags.commemorates:wikidata',
                    'tags.Commercial',
                    'tags.communication',
                    'tags.communication:radio',
                    'tags.communication:television',
                    'tags.cons',
                    'tags.construction',
                    'tags.construction:leisure',
                    'tags.construction:railway',
                    'tags.contact:email',
                    'tags.contact:facebook',
                    'tags.contact:fax',
                    'tags.contact:phone',
                    'tags.contact:twitter',
                    'tags.contact:website',
                    'tags.content',
                    'tags.contents',
                    'tags.conveying',
                    'tags.country',
                    'tags.covered',
                    'tags.craft',
                    'tags.created_by',
                    'tags.crop',
                    'tags.crossing',
                    'tags.crossing_ref',
                    'tags.cuisine',
                    'tags.currency:CNY',
                    'tags.currency:RMB',
                    'tags.cutting',
                    'tags.cycleway',
                    'tags.cycleway:left',
                    'tags.cycleway:right',
                    'tags.date',
                    'tags.delivery',
                    'tags.denomination',
                    'tags.description',
                    'tags.designation',
                    'tags.destination',
                    'tags.destination:backward',
                    'tags.destination:lanes',
                    'tags.destination:lang:en:lanes',
                    'tags.destination:ref',
                    'tags.destination:ref:to',
                    'tags.destination:street',
                    'tags.destination:street:to',
                    'tags.destination:to',
                    'tags.destroyed',
                    'tags.development',
                    'tags.devices',
                    'tags.diaper',
                    'tags.diet:halal',
                    'tags.diplomatic',
                    'tags.direction',
                    'tags.dispensing',
                    'tags.display',
                    'tags.distance',
                    'tags.disused',
                    'tags.disused:aeroway',
                    'tags.division_code',
                    'tags.dock',
                    'tags.drink',
                    'tags.drinking_water',
                    'tags.drive_in',
                    'tags.drive_through',
                    'tags.dsscreated',
                    'tags.dss created',
                    'tags.duration',
                    'tags.ele',
                    'tags.electricalboat_rental',
                    'tags.electric_scooter',
                    'tags.electrified',
                    'tags.elevator',
                    'tags.email',
                    'tags.embankment',
                    'tags.emergency',
                    'tags.entrance',
                    'tags.entrance:main',
                    'tags.escalator',
                    'tags.except',
                    'tags.exit_to',
                    'tags.exit_to:en',
                    'tags.fare',
                    'tags.fast_food',
                    'tags.fastpass',
                    'tags.fax',
                    'tags.fee',
                    'tags.female',
                    'tags.fence_type',
                    'tags.ferry',
                    'tags.fire_hydrant:type',
                    'tags.fixme',
                    'tags.fix_me',
                    'tags.FIXME',
                    'tags.flag',
                    'tags.flagfp',
                    'tags.floating',
                    'tags.floor',
                    'tags.floors',
                    'tags.food',
                    'tags.foot',
                    'tags.footway',
                    'tags.ford',
                    'tags.frequency',
                    'tags.from',
                    'tags.from:en',
                    'tags.ft_symbol',
                    'tags.fuel:diesel',
                    'tags.fuel:octane_92',
                    'tags.fuel:octane_95',
                    'tags.fuel:octane_98',
                    'tags.function',
                    'tags.garden:type',
                    'tags.gauge',
                    'tags.generator:method',
                    'tags.generator:output',
                    'tags.generator:output:electricity',
                    'tags.generator:output:hot_air',
                    'tags.generator:source',
                    'tags.generator:type',
                    'tags.genus',
                    'tags.gns:ADM1',
                    'tags.gns:dsg',
                    'tags.gns:DSG',
                    'tags.gns:UFI',
                    'tags.gns:UNI',
                    'tags.golf',
                    'tags.goods',
                    'tags.government',
                    'tags.grass',
                    'tags.handrail',
                    'tags.handrail:left',
                    'tags.handrail:right',
                    'tags.healthcare',
                    'tags.healthcare:speciality',
                    'tags.height',
                    'tags.heritage',
                    'tags.heritage:operator',
                    'tags.heritage:ref',
                    'tags.hgv',
                    'tags.high',
                    'tags.highspeed',
                    'tags.highway',
                    'tags.hiking',
                    'tags.hires',
                    'tags.hires:checkdate',
                    'tags.hires:imagery',
                    'tags.historic',
                    'tags.historic_name',
                    'tags.history',
                    'tags.honk',
                    'tags.hoops',
                    'tags.horse',
                    'tags.iata',
                    'tags.icao',
                    'tags.image',
                    'tags.incline',
                    'tags.indoor',
                    'tags.industrial',
                    'tags.information',
                    'tags.inscription',
                    'tags.inscription_1',
                    'tags.intermittent',
                    'tags.internet_access',
                    'tags.internet_access:fee',
                    'tags.internet_access:ssid',
                    'tags.interval',
                    'tags.int_name',
                    'tags.int_ref',
                    'tags.is_in',
                    'tags.is_in:continent',
                    'tags.is_in:country',
                    'tags.is_in:country_code',
                    'tags.is_in:iso_3166_2',
                    'tags.is_in:province',
                    'tags.ISO3166-1',
                    'tags.ISO3166-1:alpha2',
                    'tags.ISO3166-1:alpha3',
                    'tags.ISO3166-1:numeric',
                    'tags.ISO3166-2',
                    'tags.junction',
                    'tags.kerb',
                    'tags.key',
                    'tags.landmark',
                    'tags.landuse',
                    'tags.landuse_1',
                    'tags.lanes',
                    'tags.lanes:backward',
                    'tags.lanes:end',
                    'tags.lanes:forward',
                    'tags.lanes:psv',
                    'tags.lanes:psv:conditional',
                    'tags.lanes:start',
                    'tags.layer',
                    'tags.leaf_cycle',
                    'tags.leaf_type',
                    'tags.lean',
                    'tags.leisure',
                    'tags.length',
                    'tags.level',
                    'tags.levels',
                    'tags.line',
                    'tags.lit',
                    'tags.local_ref',
                    'tags.location',
                    'tags.lock',
                    'tags.loc_name',
                    'tags.male',
                    'tags.man_made',
                    'tags.map_size',
                    'tags.map_type',
                    'tags.maritime',
                    'tags.material',
                    'tags.max',
                    'tags.maxheight',
                    'tags.maxspeed',
                    'tags.maxstay',
                    'tags.maxweight',
                    'tags.memorial',
                    'tags.memorial:type',
                    'tags.microbrewery',
                    'tags.military',
                    'tags.min_age',
                    'tags.min_height',
                    'tags.mofa',
                    'tags.monitoring:weather',
                    'tags.monorail',
                    'tags.mooring',
                    'tags.moped',
                    'tags.motorboat',
                    'tags.motorcar',
                    'tags.motorcycle',
                    'tags.motorcycle:type',
                    'tags.motorroad',
                    'tags.motor_vehicle',
                    'tags.motor_vehicle:conditional',
                    'tags.mtb:scale',
                    'tags.mtb:scale:imba',
                    'tags.mtb:scale:uphill',
                    # 'tags.name',
                    
                    # 内容重复
                    'tags.name1',
                    # 'tags.name_1',
                    # 'tags.name_2',
                    'tags.name:ab',
                    'tags.name:af',
                    'tags.name:am',
                    'tags.name:ang',
                    'tags.name:ar',
                    'tags.name:arc',
                    'tags.name:arz',
                    'tags.name:ast',
                    'tags.name:ba',
                    'tags.name:bar',
                    'tags.name:be',
                    'tags.name:be-tarask',
                    'tags.name:bg',
                    'tags.name:bh',
                    'tags.name:bi',
                    'tags.name:bm',
                    'tags.name:bn',
                    'tags.name:bo',
                    'tags.name:botanical',
                    'tags.name:bpy',
                    'tags.name:bxr',
                    'tags.name:ca',
                    'tags.name:cbk-zam',
                    'tags.name:ce',
                    'tags.name:chr',
                    'tags.name:chy',
                    'tags.name:ckb',
                    'tags.name:cn',
                    'tags.name:crh',
                    'tags.name:cs',
                    'tags.name:csb',
                    'tags.name:cu',
                    'tags.name:cv',
                    'tags.name:cy',
                    'tags.name:da',
                    'tags.name:de',

                    # 含义不明确
                    'tags.named_for',
                    'tags.name:diq',
                    'tags.name:dsb',
                    'tags.name:dv',
                    'tags.name:ee',
                    'tags.name:el',
                    'tags.name:eml',
                    # 'tags.name:en',
                    'tags.name:eo',
                    'tags.name:es',
                    'tags.name:et',
                    'tags.name:etymology:wikidata',
                    'tags.name:eu',
                    'tags.name:ext',
                    'tags.name:fa',
                    'tags.name:fi',
                    'tags.name:fiu-vro',
                    'tags.name:fo',
                    'tags.name:fr',
                    'tags.name:frp',
                    'tags.name:frr',
                    'tags.name:fy',
                    'tags.name:ga',
                    'tags.name:gag',
                    'tags.name:gan',
                    'tags.name:gd',
                    'tags.name:gn',
                    'tags.name:gu',
                    'tags.name:gv',
                    'tags.name:ha',
                    'tags.name:hak',
                    'tags.name:haw',
                    'tags.name:he',
                    'tags.name:hi',
                    'tags.name:hif',
                    'tags.name:hr',
                    'tags.name:hu',
                    'tags.name:hy',
                    'tags.name:ia',
                    'tags.name:id',
                    'tags.name:ie',
                    'tags.name:ilo',
                    'tags.name:io',
                    'tags.name:is',
                    'tags.name:it',
                    'tags.name:iu',
                    'tags.name:ja',
                    'tags.name:jbo',
                    'tags.name:ka',
                    'tags.name:kaa',
                    'tags.name:kab',
                    'tags.name:kbd',
                    'tags.name:kg',
                    'tags.name:ki',
                    'tags.name:kk',
                    'tags.name:kl',
                    'tags.name:kn',
                    'tags.name:ko',
                    'tags.name:koi',
                    'tags.name:krc',
                    'tags.name:ks',
                    'tags.name:ku',
                    'tags.name:kv',
                    'tags.name:kw',
                    'tags.name:ky',
                    'tags.name:lb',
                    'tags.name:lez',
                    'tags.name:lmo',
                    'tags.name:ln',
                    'tags.name:lo',
                    'tags.name:lt',
                    'tags.name:lv',
                    'tags.name:mdf',
                    'tags.name:mhr',
                    'tags.name:mi',
                    'tags.name:min',
                    'tags.name:mk',
                    'tags.name:ml',
                    'tags.name:mn',
                    'tags.name:mr',
                    'tags.name:ms',
                    'tags.name:mt',
                    'tags.name:mwl',
                    'tags.name:my',
                    'tags.name:mzn',
                    'tags.name:na',
                    'tags.name:nah',
                    'tags.name:nap',
                    'tags.name:ne',
                    'tags.name:new',
                    'tags.name:nl',
                    'tags.name:no',
                    'tags.name:nso',
                    'tags.name:or',
                    'tags.name:os',
                    'tags.name:pa',
                    'tags.name:pap',
                    'tags.name:pih',
                    # 'tags.name:pinyin',
                    'tags.name:pl',
                    'tags.name:pms',
                    'tags.name:pnb',
                    'tags.name:pnt',
                    'tags.name:ps',
                    'tags.name:pt',
                    'tags.name:qu',
                    'tags.name:ro',
                    'tags.name:roa-tara',
                    'tags.name:ru',
                    'tags.name:rue',
                    'tags.name:rw',
                    'tags.name:sah',
                    'tags.name:sc',
                    'tags.name:scn',
                    'tags.name:se',
                    'tags.name:sg',
                    'tags.name:si',
                    'tags.name:sk',
                    'tags.name:sm',
                    'tags.name:sn',
                    'tags.name:so',
                    'tags.name:sq',
                    'tags.name:sr',
                    'tags.name:srn',
                    'tags.name:ss',
                    'tags.name:st',
                    'tags.name:sv',
                    'tags.name:sw',
                    'tags.name:szl',
                    'tags.name:ta',
                    'tags.name:te',
                    'tags.name:tet',
                    'tags.name:tg',
                    'tags.name:th',
                    'tags.name:tk',
                    'tags.name:tl',
                    'tags.name:tpi',
                    'tags.name:tr',
                    'tags.name:ts',
                    'tags.name:tt',
                    'tags.name:ty',
                    'tags.name:tzl',
                    'tags.name:udm',
                    'tags.name:ug',
                    'tags.name:uk',
                    'tags.name:UN:ar',
                    
                    # node, way have no record
                    'tags.name:UN:en',

                    'tags.name:UN:es',
                    'tags.name:UN:fr',
                    'tags.name:UN:ru',
                    
                    # node, way have no record
                    'tags.name:UN:zh',

                    'tags.name:ur',
                    'tags.name:uz',
                    'tags.name:vec',
                    'tags.name:vep',
                    'tags.name:vi',
                    'tags.name:vo',
                    'tags.name:war',
                    'tags.name:wo',
                    'tags.name:xal',
                    'tags.name:xmf',
                    'tags.name:yi',
                    # 'tags.name:zh',
                    'tags.name:zh-classical',
                    # 'tags.name:zh-CN',
                    'tags.name:zh-hant',
                    
                    'tags.name:zh-hant-CN',
                    'tags.name:zh-Hant-CN',
                    'tags.name:zh-min-nan',
                    'tags.name:zh_pinyin',
                    'tags.name:zh_py',
                    'tags.name:zh_pyt',
                    # 'tags.name:zh-simplified',
                    'tags.name:zh-traditional',
                    'tags.name:zh-yue',
                    'tags.name:zu',
                    'tags.naptan:Bearing',
                    'tags.nat_name',
                    'tags.natural',
                    'tags.navaid',
                    'tags.navigable',
                    'tags.network',
                    'tags.noexit',
                    'tags.noname',
                    'tags.note',
                    'tags.NOTE',
                    'tags.note:de',
                    'tags.note:en',
                    'tags.note:height',
                    'tags.note:plack',
                    'tags.notes',
                    'tags.nsdi_code',
                    'tags.number',
                    'tags.observatory:type',
                    'tags.office',
                    'tags.official_name',
                    'tags.official_name:ace',
                    'tags.official_name:af',
                    'tags.official_name:als',
                    'tags.official_name:an',
                    'tags.official_name:ast',
                    'tags.official_name:ay',
                    'tags.official_name:az',
                    'tags.official_name:bat-smg',
                    'tags.official_name:bcl',
                    'tags.official_name:bg',
                    'tags.official_name:bjn',
                    'tags.official_name:br',
                    'tags.official_name:bs',
                    'tags.official_name:ca',
                    'tags.official_name:ceb',
                    'tags.official_name:da',
                    'tags.official_name:de',
                    'tags.official_name:en',
                    'tags.official_name:eo',
                    'tags.official_name:gl',
                    'tags.official_name:hr',
                    'tags.official_name:hsb',
                    'tags.official_name:io',
                    'tags.official_name:jv',
                    'tags.official_name:la',
                    'tags.official_name:lad',
                    'tags.official_name:li',
                    'tags.official_name:mg',
                    'tags.official_name:ms',
                    'tags.official_name:nds',
                    'tags.official_name:nds-nl',
                    'tags.official_name:nl',
                    'tags.official_name:nn',
                    'tags.official_name:no',
                    'tags.official_name:nov',
                    'tags.official_name:nrm',
                    'tags.official_name:oc',
                    'tags.official_name:pag',
                    'tags.official_name:pam',
                    'tags.official_name:pcd',
                    'tags.official_name:pl',
                    'tags.official_name:sco',
                    'tags.official_name:sh',
                    'tags.official_name:sl',
                    'tags.official_name:sr',
                    'tags.official_name:stq',
                    'tags.official_name:sv',
                    'tags.official_name:wuu',
                    'tags.official_name:yo',
                    'tags.official_name:za',
                    'tags.official_name:zea',
                    'tags.official_name:zh',
                    'tags.official_name:zh-classical',
                    'tags.official_name:zh-simplified',
                    'tags.official_name:zh-traditional',
                    'tags.old_name',
                    'tags.old_name:en',
                    'tags.old_name:eo',
                    'tags.old_name:fr',
                    'tags.old_ref',
                    'tags.oneway',
                    'tags.oneway:bicycle',
                    'tags.oneway:bus',
                    'tags.oneway:electric_scooter',
                    'tags.oot',
                    'tags.opening_date',
                    'tags.opening_hours',
                    'tags.operates',
                    'tags.operational_status',
                    'tags.operator',
                    'tags.operator:en',
                    'tags.organic',
                    'tags.other_name',
                    'tags.outdoor_seating',
                    'tags.owner',
                    'tags.parent_basin',
                    'tags.parking',
                    'tags.parking:condition:right:time_interval',
                    'tags.parking:lane:right',
                    'tags.parking:lane:right:capacity',
                    'tags.parking:lanes:right',
                    'tags.park_ride',
                    'tags.passenger_lines',
                    'tags.passengers',
                    'tags.passing_places',
                    'tags.payment',
                    'tags.payment:bitcoin',
                    'tags.payment:cash',
                    'tags.payment:coins',
                    'tags.payment:litecoin',
                    'tags.payment:notes',
                    'tags.payment:public_transportation_cards',
                    'tags.payment:telephone_cards',
                    'tags.payment:visa',
                    'tags.pet',
                    'tags.phone',
                    'tags.pier:material',
                    'tags.piste:type',
                    'tags.place',
                    'tags.plant',
                    'tags.plant:output',
                    'tags.plant:output:electricity',
                    'tags.plant:output:hot_air',
                    'tags.platforms',
                    'tags.playce_number',
                    'tags.playground',
                    'tags.population',
                    'tags.population:date',
                    'tags.port',
                    'tags.postal_code',
                    'tags.post_box:type',
                    'tags.power',
                    'tags.power_source',
                    'tags.price',
                    'tags.private',
                    'tags.proposed',
                    'tags.proposed:railway',
                    'tags.protect_class',
                    'tags.psv',
                    'tags.public_transport',
                    'tags.public_transport:version',
                    'tags.rail',
                    'tags.railway',
                    'tags.railway:traffic_mode',
                    'tags.ramp',
                    'tags.ramp:bicycle',
                    'tags.ramp:wheelchair',
                    'tags.ramsar',
                    'tags.ramsar_no',
                    'tags.rank',
                    'tags.recording',
                    'tags.recycling:cans',
                    'tags.recycling:glass',
                    'tags.recycling:paper',
                    'tags.recycling_type',
                    'tags.ref',
                    'tags.ref:cn',
                    'tags.ref:en',
                    'tags.ref_int',
                    'tags.ref:vi',
                    'tags.ref:whc',
                    'tags.relation',
                    # 'tags.religion',
                    # 'tags.religion_1',
                    # 'tags.religion_2',
                    # 'tags.religion_3',
                    # only one record
                    'tags.religion:zh',
                    'tags.reservoir_type',
                    'tags.restriction',
                    'tags.restriction:bicycle',
                    'tags.restriction:motorcycle',
                    'tags.roof:angle',
                    'tags.roof:colour',
                    'tags.roof:direction',
                    'tags.roof:height',
                    'tags.roof:levels',
                    'tags.roof:material',
                    'tags.roof:orientation',
                    'tags.roof:shape',
                    'tags.rooms',
                    'tags.roundabout',
                    'tags.roundtrip',
                    'tags.route',
                    'tags.route_master',
                    'tags.route_ref',
                    'tags.runway',
                    'tags.sac_scale',
                    'tags.sanitary_dump_station',
                    'tags.Sanzhi Jie',
                    'tags.scenic',

                    # 数据太少
                    'tags.school',
                    'tags.scooter',
                    'tags.seamark:beacon_special_purpose:colour',
                    'tags.seamark:buoy_lateral:category',
                    'tags.seamark:buoy_lateral:colour',
                    'tags.seamark:buoy_lateral:colour_pattern',
                    'tags.seamark:buoy_lateral:shape',
                    'tags.seamark:cable_submarine:category',
                    'tags.seamark:crane:category',
                    'tags.seamark:fog_signal:category',
                    'tags.seamark:harbour:category',
                    'tags.seamark:information',
                    'tags.seamark:light:character',
                    'tags.seamark:light:colour',
                    'tags.seamark:light:group',
                    'tags.seamark:light:height',
                    'tags.seamark:light:period',
                    'tags.seamark:light:range',
                    'tags.seamark:light:reference',
                    'tags.seamark:mooring:category',
                    'tags.seamark:name',
                    'tags.seamark:radar_transponder:category',
                    'tags.seamark:radar_transponder:group',
                    'tags.seamark:type',
                    'tags.seats',
                    'tags.segregated',
                    # 'tags.service',
                    'tags.service:bicycle:chain_tool',
                    'tags.service:bicycle:pump',
                    'tags.service:bicycle:repair',
                    'tags.service:bicycle:retail',
                    'tags.service_change',
                    'tags.service_times',
                    'tags.shelter',
                    'tags.shelter_type',
                    'tags.ship',
                    # 'tags.shop',
                    # 'tags.shop_1',
                    # 'tags.shop_2',
                    # 'tags.shop_3',
                    'tags.short_name',
                    'tags.short_name:en',
                    'tags.short_name:ru',
                    'tags.sidewalk',
                    'tags.site',
                    'tags.site:type',
                    'tags.ski',
                    'tags.smoking',
                    'tags.smoothness',
                    'tags.snowmobile',
                    'tags.social_facility',
                    'tags.social_facility_for',
                    'tags.social_facility:for',
                    'tags.source',
                    'tags.source_1',
                    'tags.source:bicycle',
                    'tags.source:height',
                    'tags.source:name',
                    'tags.source:population',
                    'tags.source:position',
                    'tags.source_ref',
                    'tags.source:ref',
                    'tags.source:tracer',
                    'tags.source:zoomlevel',
                    'tags.spaces',
                    'tags.species',
                    'tags.sport',
                    'tags.sport_1',
                    'tags.stars',
                    'tags.start_date',
                    'tags.station',
                    'tags.step_count',
                    'tags.stopping',

                    # inner
                    'tags.Street',
                    'tags.substation',
                    # no subway key, change to station
                    # 'tags.subway',
                    'tags.supervised',
                    'tags.support',
                    'tags.surface',
                    'tags.surveillance',
                    'tags.surveillance:type',
                    'tags.surveillance:zone',
                    # no key swimming_pool
                    'tags.swimming_pool',
                    'tags.tactile_paving',
                    'tags.tags',
                    'tags.takeaway',
                    'tags.target',
                    'tags.tat_deeeee',
                    'tags.taxi',
                    'tags.telecom',
                    'tags.theatre',
                    'tags.theatre:genre',
                    'tags.tiger:county',
                    'tags.tiger:PLACEFP',
                    'tags.timetable',
                    'tags.timezone',
                    'tags.to',
                    'tags.todo',
                    'tags.to:en',
                    'tags.toilets',
                    'tags.toilets:disposal',
                    'tags.toilets:wheelchair',
                    'tags.toll',
                    'tags.total_length',
                    # 'tags.tourism',
                    # 'tags.tourist_bus',
                    'tags.tower',
                    'tags.tower:type',
                    'tags.track',
                    'tags.tracks',
                    'tags.tracktype',
                    'tags.traffic_calming',
                    'tags.traffic_restriction',
                    'tags.traffic_sign',
                    'tags.traffic_signals',
                    'tags.traffic_signals:direction',
                    'tags.traffic_signals:sound',
                    'tags.traffic_signals:vibration',
                    'tags.traffic_sign:backward',
                    'tags.traffic_sign:forward',
                    'tags.traffic_sign:forward_1',
                    'tags.traffic_sign:training_ground',
                    'tags.trail_visibility',
                    'tags.train',
                    'tags.transformer',
                    'tags.transit:lanes:forward',
                    'tags.tree',
                    'tags.trees',
                    'tags.trolleybus',
                    'tags.trolley_wire',
                    'tags.truck',
                    'tags.tunnel',
                    'tags.turkey_class',
                    'tags.turn:lanes',
                    'tags.turn:lanes:backward',
                    'tags.turn:lanes:forward',
                    # 'tags.type',
                    'tags.unisex',
                    'tags.unpatrolled',
                    'tags.url',
                    'tags.usage',
                    'tags.use',
                    'tags.user_defined_other',
                    'tags.vehicle',
                    'tags.vending',
                    'tags.visibility',
                    'tags.voltage',
                    'tags.voltage-high',
                    'tags.voltage:primary',
                    'tags.wall',
                    'tags.water',
                    'tags.waterway',
                    'tags.waterway:sign',
                    'tags.waterway:type',
                    'tags.weather_protection',
                    'tags.website',
                    'tags.website_1',
                    'tags.website:en',
                    'tags.website:zh',
                    'tags.wetland',
                    'tags.whc:inscription_date',
                    'tags.wheelchair',
                    'tags.whitewater:section_grade',
                    'tags.width',
                    'tags.WidthEnd',
                    'tags.WidthEnds',
                    'tags.width:lanes',
                    'tags.width:lanes:end',
                    'tags.width:lanes:start',
                    'tags.WidthStart',
                    'tags.wifi',
                    'tags.wikidata',
                    'tags.wikipedia',
                    'tags.wikipedia:en',
                    'tags.wikipedia:zh',
                    'tags.wires',
                    'tags.WLAN',
                    'tags.wood',
                    'tags.wpt_symbol',
                    'tags.wq',
                    'tags.zhb_code',
                    # 'tags.zoo',
                    # 'tags.描述',
                    'tags.中国行政区划',
                    ]

          for key in remove_list:
               mongoCollection.update_many({key:{'$exists': True}}, {'$unset': {key: ''}})

     def refresh_db(self):
          mongoCollection.drop()

          for doc in mongoOrgCollection.find():
               if doc['type'] == 'node' and ('tags' not in doc or len(doc['tags']) == 0):
                    continue
               if doc['type'] == 'way' and ('nd_refs' not in doc or len(doc['nd_refs']) == 0):
                    continue
               mongoCollection.insert_one(doc)

     def refresh_one_record(self, record_id):        
          org_record = mongoOrgCollection.find_one({"_id" : ObjectId(record_id)})
          if org_record is None or len(org_record) == 0:
               self._logger.info("can not find record, type {}, id {}".format(node_type, node_id))
               return

          del_record = mongoCollection.find_one({"_id" : ObjectId(record_id)})

          if del_record:        
               self._logger.info("will delete {}".format(record_id))
               self._log_record(record_id)
               mongoCollection.delete_one({"_id" : ObjectId(record_id)})

          mongoCollection.insert_one(org_record)

          self._logger.info("new record")
          self._log_record(record_id)

    
     def unset_empty_tags(self):
          '''
          如果node的"tags"为空，清除对应"tags"
          '''
          cursor = mongoCollection.find({'tags': {'$exists': True}})

          self._log_count('tags',True)
          for doc in cursor:
               if len(doc['tags']) == 0:
                    mongoCollection.update_one({'_id': doc['_id']}, {'$unset': {'tags': ''}})

          self._log_count('tags',False)

     def unset_empty_address(self):
          '''
          如果node的"address"为空，清除对应"address"
          '''
          cursor = mongoCollection.find({'address': {'$exists': True}})

          self._log_count('address',True)
          for doc in cursor:
               if len(doc['address']) == 0:
                    mongoCollection.update_one({'_id': doc['_id']}, {'$unset': {'address': ''}})

          self._log_count('address',False)

     def clean_empty_node(self):
          self._logger.info("before clean, node count : {}".format(mongoCollection.count({'type': 'node'})))

          ele_list =['_id', 'id', 'type', 'pos', 'created']

          cursor = mongoCollection.find({'type': 'node'})
          for doc in cursor:
               find = False
               for ele in doc:
                    if ele not in ele_list:
                         find = True
                         break
               if not find:
                    mongoCollection.delete_one({'_id': doc['_id']})
        
          self._logger.info("after clean, node count : {}".format(mongoCollection.count({'type': 'node'})))
          
     def clean_empty_way(self):
          self._logger.info("before clean, way count : {}".format(mongoCollection.count({'type': 'way'})))

          ele_list =['_id', 'id', 'type', 'nd_refs', 'created']

          cursor = mongoCollection.find({'type': 'way'})
          for doc in cursor:
               find = False
               for ele in doc:
                    if ele not in ele_list:
                         find = True
                         break
               if not find:
                    mongoCollection.delete_one({'_id': doc['_id']})
        
          self._logger.info("after clean, way count : {}".format(mongoCollection.count({'type': 'way'})))
          
     def print_record_by_object_id(self, record_id):
          obj_id = record_id if isinstance(record_id,ObjectId) else ObjectId(record_id)
        
          doc = mongoCollection.find_one({'_id': obj_id}) 
          if doc:
               pprint.pprint(doc)
          else:
               print("can not find {}".format(record_id))

     def print_query_key_exists(self, key_name, out_logger = None, print_set = False):
          '''
          check final database, for result checking
             if db key exists, print all result
          '''
          logger = self._logger if out_logger is None else out_logger

          all_list = []
          for doc in mongoCollection.find({key_name: {'$exists': True}}, {key_name: 1, 'id':1}):    
               # pprint.pprint(doc)
               logger.info("_id : {}\nid:{}".format(doc['_id'], doc['id']))
               key_step = key_name.split('.')
               if len(key_step) ==1:
                    logger.info("{} : {}".format(key_name, doc[key_name]))
                    if type(doc[key_name]) is list:
                         all_list+= doc[key_name]
                    else:
                         all_list.append(doc[key_name])
               if len(key_step) ==2:
                    logger.info("{} : {}".format(key_name, doc[key_step[0]][key_step[1]]))
                    all_list.append(doc[key_step[0]][key_step[1]])
               else:
                    logger.info('{}'.format(key_step))

          all_list.sort()

          if print_set:
               logger.info('\n' + '\n'.join(set(all_list)))
          else:
               logger.info('\n' + "\n".join(all_list))


     def check_key_origion(self, key_name, out_logger = None, print_set = False):
          '''
          print origion key value          
          '''
          logger = self._logger if out_logger is None else out_logger

          all_list = []
          for doc in mongoOrgCollection.find({key_name: {'$exists': True}}, {key_name: 1, 'id':1}):    
               # pprint.pprint(doc)
               logger.info("_id : {}\nid:{}".format(doc['_id'], doc['id']))
               key_step = key_name.split('.')
               if len(key_step) ==1:
                    logger.info("{} : {}".format(key_name, doc[key_name]))
                    all_list.append(doc[key_name])
               if len(key_step) ==2:
                    logger.info("{} : {}".format(key_name, doc[key_step[0]][key_step[1]]))
                    all_list.append(doc[key_step[0]][key_step[1]])
               else:
                    logger.info('{}'.format(key_step))

          all_list.sort()

          if print_set:
               logger.info('\n' + '\n'.join(set(all_list)))
          else:
               logger.info('\n' + "\n".join(all_list))

generalTools = GeneralTools()